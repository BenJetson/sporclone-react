{"version":3,"sources":["components/Home.js","components/NavDrawer.js","components/NavBar.js","Theme.js","components/AnswerCard.js","components/AnswerCardDeck.js","components/Game.js","components/GameController.js","components/GameLoader.js","Const.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Box","Typography","variant","List","GameIndex","map","g","idx","ListItem","component","Link","button","to","id","ListItemText","primary","name","NavDrawer","open","onClose","Drawer","onClick","ListItemIcon","Divider","dense","useStyles","makeStyles","theme","navbar","marginBottom","NavBar","classes","useState","drawerOpen","setDrawerOpen","AppBar","position","className","Toolbar","IconButton","edge","color","aria-label","Menu","RouterLink","Theme","createMuiTheme","palette","main","orange","secondary","purple","card","textAlign","correct","backgroundColor","success","light","contrastText","incorrect","error","answerContainer","paddingBottom","answerText","lineHeight","AnswerCard","label","answer","showAnswer","markCorrect","cardClass","Card","CardContent","CheckCircle","Error","element","paragraph","HelpOutline","unblur","filter","blur","transitionProperty","transitionDuration","transitionTimingFunction","AnswerCardDeck","questions","showKey","cards","question","push","isCorrect","Grid","container","spacing","item","xs","sm","md","lg","headerImg","maxWidth","maxHeight","border","grey","otherGames","borderLeft","timerWarning","fontWeight","center","Section","styled","margin","secondsToTime","t","m","Math","floor","s","padStart","Game","headline","image","questionStatus","wasStarted","gameOver","timeLeft","score","onGuess","onButton","src","alt","alignItems","justify","Button","disabled","TextField","size","fullWidth","onKeyUp","event","input","target","guess","value","autoFocus","length","GameController","gameIdx","template","allGames","setQuestionStatus","setTimeLeft","setWasStarted","setGameOver","setOtherGames","setScore","useEffect","q","answers","display","accepts","makeInitialQuestionStatus","time","currentIdx","Array","isArray","slice","selectedGames","Object","keys","random","values","selectOtherGames","timerRef","setTimeout","clearTimeout","entries","toLowerCase","updatedQuestionStatus","JSON","parse","stringify","updatedScore","GameLoader","gameId","useParams","setGameIdx","gameData","setGameData","loadError","setLoadError","foundIdx","i","findGameIdx","a","fetch","response","json","parsed","style","marginTop","CircularProgress","fontSize","App","ThemeProvider","Container","path","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78358d12.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nimport GameIndex from \"../games/index.json\";\n\nlet Home = () => (\n  <Box>\n    <Typography variant=\"h2\">Welcome to Sporclone!</Typography>\n    <Typography>Select a game to play from the list below.</Typography>\n    <List>\n      {GameIndex.map((g, idx) => (\n        <ListItem component={Link} button to={`/game/${g.id}`} key={idx}>\n          <ListItemText primary={g.name} />\n        </ListItem>\n      ))}\n    </List>\n  </Box>\n);\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n} from \"@material-ui/core\";\nimport GameIndex from \"../games/index.json\";\nimport { Home } from \"@material-ui/icons\";\n\nlet NavDrawer = ({ open, onClose }) => {\n  return (\n    <Drawer open={open} onClose={onClose}>\n      <List>\n        <ListItem component={Link} button to={\"/\"} onClick={onClose}>\n          <ListItemIcon>\n            <Home />\n          </ListItemIcon>\n          <ListItemText primary=\"Home\" />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem dense={true}>\n          <Typography variant=\"overline\">All Games</Typography>\n        </ListItem>\n        {GameIndex.map((g, idx) => (\n          <ListItem\n            component={Link}\n            button\n            to={`/game/${g.id}`}\n            onClick={onClose}\n            key={idx}\n          >\n            <ListItemText primary={g.name} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n};\n\nexport default NavDrawer;\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Link,\n  // SwipeableDrawer,\n  // Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport NavDrawer from \"./NavDrawer\";\n\nconst useStyles = makeStyles((theme) => ({\n  navbar: {\n    marginBottom: \"1.5em\",\n  },\n}));\n\nlet NavBar = () => {\n  const classes = useStyles();\n\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  let openDrawer = () => setDrawerOpen(true);\n  let closeDrawer = () => setDrawerOpen(false);\n\n  return (\n    <>\n      <NavDrawer open={drawerOpen} onClose={closeDrawer} />\n      <AppBar position=\"static\" className={classes.navbar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={openDrawer}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"h1\">\n            <Link to={\"/\"} component={RouterLink} color=\"inherit\">\n              Sporclone\n            </Link>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport {\n  // deepOrange,\n  // deepPurple,\n  orange,\n  purple,\n} from \"@material-ui/core/colors\";\n\nconst Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: orange[\"800\"],\n    },\n    secondary: {\n      main: purple[\"800\"],\n    },\n  },\n});\n\nexport default Theme;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardContent,\n  Divider,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { HelpOutline, CheckCircle, Error } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    textAlign: \"center\",\n  },\n  correct: {\n    backgroundColor: theme.palette.success.light,\n    color: theme.palette.success.contrastText,\n  },\n  incorrect: {\n    backgroundColor: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n  },\n  answerContainer: {\n    paddingBottom: \"16px !important\",\n  },\n  answerText: {\n    lineHeight: 1,\n  },\n}));\n\nlet AnswerCard = ({\n  label,\n  answer,\n  showAnswer = false,\n  markCorrect = null,\n}) => {\n  const classes = useStyles();\n\n  let cardClass = classes.card;\n  if (markCorrect !== null) {\n    cardClass += \" \" + (markCorrect ? classes.correct : classes.incorrect);\n  }\n\n  return (\n    <Card variant=\"outlined\" className={cardClass}>\n      <CardContent>\n        {markCorrect !== null && (markCorrect ? <CheckCircle /> : <Error />)}\n        <Typography element=\"p\" variant=\"h6\">\n          {label}\n        </Typography>\n      </CardContent>\n      <Divider />\n      <CardContent className={classes.answerContainer}>\n        <Typography\n          variant=\"body1\"\n          paragraph={false}\n          className={classes.answerText}\n        >\n          {showAnswer ? answer : <HelpOutline />}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nAnswerCard.propTypes = {\n  label: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  showAnswer: PropTypes.bool,\n  markCorrect: PropTypes.bool,\n};\n\nexport default AnswerCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Grid, makeStyles } from \"@material-ui/core\";\nimport AnswerCard from \"./AnswerCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  unblur: {\n    filter: \"blur(0px) !important\",\n  },\n  blur: {\n    filter: \"blur(15px)\",\n    transitionProperty: \"filter\",\n    transitionDuration: \"2s\",\n    transitionTimingFunction: \"ease\",\n  },\n}));\n\nlet AnswerCardDeck = ({ questions, blur = true, showKey = false }) => {\n  const classes = useStyles();\n\n  let cards = [];\n  for (let question of questions) {\n    cards.push({\n      label: question.label,\n      answer: question.answer,\n      showAnswer: showKey || question.isCorrect,\n      markCorrect: showKey ? question.isCorrect : null,\n    });\n  }\n\n  return (\n    <Box className={`${classes.blur} ${!blur ? classes.unblur : \"\"}`}>\n      <Grid container spacing={1}>\n        {cards.map((card, idx) => (\n          <Grid item xs={6} sm={4} md={3} lg={2} key={idx}>\n            <AnswerCard {...card} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n};\n\nAnswerCardDeck.propTypes = {\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      answer: PropTypes.string.isRequired,\n      isCorrect: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  showKey: PropTypes.bool,\n};\n\nexport default AnswerCardDeck;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Grid,\n  TextField,\n  Typography,\n  makeStyles,\n  styled,\n} from \"@material-ui/core\";\nimport AnswerCardDeck from \"./AnswerCardDeck\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  headerImg: {\n    maxWidth: 82,\n    maxHeight: 82,\n    border: `1px solid ${theme.palette.grey[500]}`,\n  },\n  otherGames: {\n    borderLeft: `1px solid ${theme.palette.grey[300]}`,\n  },\n  timerWarning: {\n    color: theme.palette.error.main,\n    fontWeight: \"bold\",\n  },\n  center: {\n    textAlign: \"center\",\n  },\n}));\n\nconst Section = styled(Box)({\n  margin: \"1em 0\",\n});\n\nlet secondsToTime = (t) => {\n  if (t < 0) t = 0;\n\n  const m = `${Math.floor(t / 60)}`;\n  const s = `${t % 60}`.padStart(2, \"0\");\n\n  return `${m}:${s}`;\n};\n\nlet Game = ({\n  headline,\n  image,\n  questionStatus,\n  otherGames,\n  wasStarted,\n  gameOver,\n  timeLeft,\n  score,\n  onGuess,\n  onButton,\n}) => {\n  const classes = useStyles();\n\n  const handleGuess = (event) => {\n    const input = event.target;\n    const guess = input.value;\n    const correct = onGuess(guess);\n\n    if (correct) {\n      input.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <Section>\n        <Grid container spacing={2}>\n          {image && image.src && image.alt && (\n            <Grid item xs={\"auto\"}>\n              <img\n                className={classes.headerImg}\n                src={image.src}\n                alt={image.alt}\n              />\n            </Grid>\n          )}\n          <Grid item xs={8}>\n            <Typography variant=\"h4\" component=\"h1\">\n              {headline}\n            </Typography>\n          </Grid>\n          <Grid item className={classes.otherGames}>\n            <Typography variant=\"h6\" component=\"h3\">\n              Other Games\n            </Typography>\n            <Typography component=\"span\">\n              <ul>\n                {otherGames.map((g) => (\n                  <li key={`other-${g.id}`}>\n                    <Link to={g.id}>{g.name}</Link>\n                  </li>\n                ))}\n              </ul>\n            </Typography>\n          </Grid>\n        </Grid>\n      </Section>\n      <Divider />\n      <Section>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"center\">\n          <Grid item xs={4} sm={\"auto\"} className={classes.center}>\n            {!wasStarted ? (\n              <Button variant=\"contained\" color=\"primary\" onClick={onButton}>\n                Start Game\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={gameOver}\n                onClick={onButton}\n              >\n                Give Up\n              </Button>\n            )}\n          </Grid>\n          <Grid item xs={8} sm>\n            {\n              <TextField\n                label=\"Enter Guess\"\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"secondary\"\n                fullWidth\n                onKeyUp={handleGuess}\n                autoFocus\n              />\n            }\n          </Grid>\n          <Grid item xs={6} sm={2} className={classes.center}>\n            <Typography variant=\"h6\" component=\"h4\">\n              Score\n            </Typography>\n            <Typography>\n              {score}/{questionStatus.length}\n            </Typography>\n          </Grid>\n          <Grid item xs={6} sm={2} className={classes.center}>\n            <Typography variant=\"h6\" component=\"h4\">\n              Time\n            </Typography>\n            <Typography className={timeLeft < 16 ? classes.timerWarning : null}>\n              {secondsToTime(timeLeft)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Section>\n      <Divider />\n      <Section>\n        <AnswerCardDeck\n          questions={questionStatus}\n          blur={!wasStarted}\n          showKey={gameOver}\n        />\n      </Section>\n    </>\n  );\n};\n\nGame.propTypes = {\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n  }),\n  questionStatus: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      answer: PropTypes.string.isRequired,\n      accepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n      isCorrect: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  otherGames: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  wasStarted: PropTypes.bool.isRequired,\n  gameOver: PropTypes.bool.isRequired,\n  timeLeft: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  onGuess: PropTypes.func.isRequired,\n  onButton: PropTypes.func.isRequired,\n};\n\nexport default Game;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Game from \"./Game\";\n\nexport let makeInitialQuestionStatus = (questions) => {\n  let questionStatus = [];\n  for (let q of questions) {\n    questionStatus.push({\n      label: q.label,\n      answer: q.answers.display,\n      accepts: q.answers.accepts,\n      isCorrect: false,\n    });\n  }\n  return questionStatus;\n};\n\nlet selectOtherGames = (currentIdx, allGames) => {\n  if (!allGames || !Array.isArray(allGames)) {\n    return [];\n  }\n\n  const maxCount = 3;\n  // Must subtract one for the current game.\n  if (allGames.length - 1 <= maxCount) {\n    return [\n      ...allGames.slice(0, currentIdx),\n      ...allGames.slice(currentIdx + 1),\n    ];\n  }\n\n  const selectedGames = {};\n  while (Object.keys(selectedGames).length < maxCount) {\n    let idx = Math.floor(Math.random() * allGames.length);\n    if (idx in selectedGames || idx === currentIdx) {\n      continue;\n    }\n\n    selectedGames[idx] = allGames[idx];\n  }\n\n  return Object.values(selectedGames);\n};\n\nlet GameController = ({ gameIdx, template, allGames }) => {\n  const [questionStatus, setQuestionStatus] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [wasStarted, setWasStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [otherGames, setOtherGames] = useState([]);\n  const [score, setScore] = useState(0);\n\n  // Reset the game state when the props change.\n  useEffect(() => {\n    setQuestionStatus(makeInitialQuestionStatus(template.questions));\n    setTimeLeft(template.time);\n    setWasStarted(false);\n    setGameOver(false);\n    setOtherGames(selectOtherGames(gameIdx, allGames));\n    setScore(0);\n  }, [gameIdx, template, allGames]);\n\n  useEffect(() => {\n    if (wasStarted && !gameOver) {\n      let timerRef = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n        if (timeLeft < 1) {\n          setGameOver(true);\n        }\n      }, 1000);\n\n      return () => {\n        clearTimeout(timerRef);\n      };\n    }\n  }, [wasStarted, gameOver, timeLeft]);\n\n  let submitGuess = (guess) => {\n    if (!wasStarted || gameOver) return false;\n\n    for (const [idx, q] of questionStatus.entries()) {\n      if (q.isCorrect) continue;\n\n      for (const answer of q.accepts) {\n        if (guess.toLowerCase() === answer.toLowerCase()) {\n          // Make a deep copy of the status to respect immutability.\n          let updatedQuestionStatus = JSON.parse(\n            JSON.stringify(questionStatus)\n          );\n          updatedQuestionStatus[idx].isCorrect = true;\n          setQuestionStatus(updatedQuestionStatus);\n\n          let updatedScore = score + 1;\n          setScore(updatedScore);\n\n          if (updatedScore === questionStatus.length) {\n            setGameOver(true);\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  let handleButton = () => {\n    if (!wasStarted) {\n      setWasStarted(true);\n    } else if (!gameOver) {\n      setGameOver(true);\n    }\n  };\n\n  return (\n    <Game\n      headline={template.headline}\n      image={template?.image ?? null}\n      questionStatus={questionStatus}\n      otherGames={otherGames}\n      wasStarted={wasStarted}\n      gameOver={gameOver}\n      timeLeft={timeLeft}\n      score={score}\n      onGuess={submitGuess}\n      onButton={handleButton}\n    />\n  );\n};\n\nGameController.propTypes = {\n  gameIdx: PropTypes.number.isRequired,\n  template: PropTypes.shape({\n    time: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    headline: PropTypes.string.isRequired,\n    image: PropTypes.shape({\n      src: PropTypes.string.isRequired,\n      alt: PropTypes.string.isRequired,\n    }),\n    questions: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        answers: PropTypes.shape({\n          display: PropTypes.string.isRequired,\n          accepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  allGames: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default GameController;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport GameController from \"./GameController\";\nimport { Box, CircularProgress, Typography } from \"@material-ui/core\";\nimport { Error } from \"@material-ui/icons\";\n\nimport GameIndex from \"../games/index.json\";\nimport { BaseURL } from \"../Const\";\n\nlet findGameIdx = (gameId) => {\n  for (let i = 0; i < GameIndex.length; i++) {\n    if (GameIndex[i].id === gameId) {\n      return i;\n    }\n  }\n  return null;\n};\n\nlet GameLoader = () => {\n  const { gameId } = useParams();\n\n  const [gameIdx, setGameIdx] = useState(null);\n  const [gameData, setGameData] = useState(null);\n  const [loadError, setLoadError] = useState(null);\n\n  useEffect(() => {\n    const foundIdx = findGameIdx(gameId);\n    if (foundIdx === null) {\n      setGameData(false);\n      setLoadError(`No game exists by the ID of \"${gameId}\".`);\n      return;\n    }\n\n    setGameIdx(foundIdx);\n\n    (async () => {\n      try {\n        const response = await fetch(`${BaseURL}/games/${gameId}.json`);\n        const parsed = await response.json();\n        setGameData(parsed);\n      } catch {\n        setGameData(false);\n        setLoadError(\"Could not retrieve game template from server.\");\n      }\n    })();\n  }, [gameId]);\n\n  if (gameData) {\n    return (\n      <GameController\n        gameIdx={gameIdx}\n        allGames={GameIndex}\n        template={gameData}\n      />\n    );\n  } else if (gameData === null) {\n    return (\n      <Box style={{ textAlign: \"center\", marginTop: \"25vmin\" }}>\n        <CircularProgress size=\"30vmin\" />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h3\">\n        <Error fontSize=\"large\" /> Error\n      </Typography>\n      <Typography>\n        Sporclone could not load the game due to a problem.\n      </Typography>\n      <Typography>{loadError ?? \"An unknown error has occurred.\"}</Typography>\n    </Box>\n  );\n};\n\nexport default GameLoader;\n","export let BaseURL = \"/sporclone-react\";\nif (process.env.NODE_ENV !== \"production\") {\n  BaseURL = \"\";\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, ThemeProvider } from \"@material-ui/core\";\n\nimport Home from \"./components/Home\";\nimport NavBar from \"./components/NavBar\";\nimport Theme from \"./Theme\";\n\nimport GameLoader from \"./components/GameLoader\";\n\nlet App = () => {\n  return (\n    <ThemeProvider theme={Theme}>\n      <Router>\n        <NavBar />\n        <Container>\n          <Switch>\n            <Route path={\"/game/:gameId\"} children={<GameLoader />} />\n            <Route path={\"/\"} key=\"home\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}