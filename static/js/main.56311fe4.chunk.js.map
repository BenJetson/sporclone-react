{"version":3,"sources":["components/ScrollSpy.js","Const.js","components/GameIndexLoader.js","components/Home.js","components/NavDrawer.js","components/NavBar.js","Theme.js","components/GameLoader.js","components/AnswerCard.js","components/AnswerCardDeck.js","components/Game.js","components/GameController.js","Download.js","components/Editor.js","components/EditorController.js","App.js","reportWebVitals.js","index.js"],"names":["ScrollSpy","pathName","useLocation","useEffect","window","scrollTo","BaseURL","GameIndex","GameIndexPromise","GetGameIndex","Promise","resolve","a","fetch","response","json","console","error","Home","useState","allGames","setAllGames","Box","Typography","variant","List","map","g","idx","ListItem","component","Link","button","to","id","ListItemIcon","PlayArrow","ListItemText","primary","name","Add","NavDrawer","open","onClose","Drawer","onClick","Divider","dense","useStyles","makeStyles","theme","navbar","marginBottom","NavBar","classes","drawerOpen","setDrawerOpen","AppBar","position","className","Toolbar","IconButton","edge","color","aria-label","Menu","RouterLink","Theme","createMuiTheme","palette","main","orange","secondary","purple","GameLoader","Component","gameId","useParams","gameIdx","setGameIdx","gameData","setGameData","loadError","setLoadError","foundIdx","i","length","parsed","template","style","textAlign","marginTop","CircularProgress","size","fontSize","card","correct","backgroundColor","success","light","contrastText","incorrect","answerContainer","paddingBottom","answerText","lineHeight","AnswerCard","label","answer","showAnswer","markCorrect","cardClass","Card","CardContent","CheckCircle","element","paragraph","HelpOutline","unblur","filter","blur","transitionProperty","transitionDuration","transitionTimingFunction","AnswerCardDeck","questions","showKey","cards","question","push","isCorrect","Grid","container","spacing","item","xs","sm","md","lg","headerImg","maxWidth","maxHeight","border","grey","otherGames","borderLeft","timerWarning","fontWeight","center","Section","styled","margin","secondsToTime","t","m","Math","floor","s","padStart","Game","headline","image","questionStatus","wasStarted","gameOver","timeLeft","score","onGuess","onButton","src","alt","alignItems","justify","Button","disabled","TextField","fullWidth","onKeyUp","event","input","target","guess","value","autoFocus","aria-hidden","startIcon","Edit","GameController","setQuestionStatus","setTimeLeft","setWasStarted","setGameOver","setOtherGames","setScore","q","answers","display","accepts","makeInitialQuestionStatus","time","currentIdx","Array","isArray","slice","selectedGames","Object","keys","random","values","selectOtherGames","timerRef","setTimeout","clearTimeout","entries","toLowerCase","updatedQuestionStatus","JSON","parse","stringify","updatedScore","download","url","filename","payload","contents","contentType","URL","createObjectURL","File","type","makeFileURL","e","warn","Blob","makeBlobURL","encodeURIComponent","makeDataURL","anchor","document","createElement","setAttribute","body","appendChild","click","removeChild","Alert","BasicAlert","Editor","game","invalid","wasSubmitted","updateField","onSubmit","addQuestion","duplicateQuestion","deleteQuestion","moveQuestion","fieldHasError","fieldName","updateAcceptedAnswers","fieldPrefix","op","doUpdate","chip","answerIdx","updatedValues","Error","splice","isImageRequired","gutterBottom","severity","AlertTitle","InputProps","fontFamily","required","helperText","onChange","title","inputProps","onAdd","onDelete","CardActions","disableSpacing","Tooltip","Delete","ArrowUpward","ArrowDownward","FileCopy","href","rel","GetApp","makeBlankQuestion","makeUUID","toUpperCase","EditorController","makeGameEditable","updateGame","setWasSubmitted","updateInvalid","makeDeepCopyOfGame","validateGame","force","updatedInvalid","field","updatedGame","includes","parseInt","substring","lastIndexOf","gameToDownload","object","out","format","parser","plugins","parserBabel","downloadAsJSON","atIndex","copyOfQuestion","direction","destIdx","placeholder","App","ThemeProvider","Container","path","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.56311fe4.chunk.js","sourcesContent":["import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// Implements React Router scroll restoration.\n// https://reactrouter.com/web/guides/scroll-restoration\n\nlet ScrollSpy = () => {\n  const pathName = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathName]);\n\n  return null;\n};\n\nexport default ScrollSpy;\n","export const BaseURL = \"/sporclone-react\";\n\n// The below is no longer necessary since \"homepage\" was set in package.json.\n//\n// if (process.env.NODE_ENV !== \"production\") {\n//   BaseURL = \"\";\n// }\n","import { BaseURL } from \"../Const\";\n\n/** @type object | null */\nlet GameIndex = null;\n\n/** @type Promise<object></object> | null */\nlet GameIndexPromise = null;\n\nlet GetGameIndex = () => {\n  if (GameIndex) {\n    return Promise.resolve(GameIndex);\n  } else if (!GameIndexPromise) {\n    GameIndexPromise = (async () => {\n      try {\n        const response = await fetch(`${BaseURL}/games/index.json`);\n        GameIndex = await response.json();\n\n        return GameIndex;\n      } catch {\n        console.error(\n          \"Failed to retrieve game index! Supplying empty index and will \" +\n            \"retry on next request for index.\"\n        );\n\n        GameIndexPromise = null;\n        return [];\n      }\n    })();\n  }\n\n  return GameIndexPromise;\n};\n\nexport default GetGameIndex;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { Add, PlayArrow } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\n\nimport GetGameIndex from \"./GameIndexLoader\";\n\nlet Home = () => {\n  const [allGames, setAllGames] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      setAllGames(await GetGameIndex());\n    })();\n  });\n\n  return (\n    <Box>\n      <Typography variant=\"h2\">Welcome to Sporclone!</Typography>\n      <Typography>Select a game to play from the list below.</Typography>\n      <List>\n        {allGames.map((g, idx) => (\n          <ListItem component={Link} button to={`/play/${g.id}`} key={idx}>\n            <ListItemIcon>\n              <PlayArrow />\n            </ListItemIcon>\n            <ListItemText primary={g.name} />\n          </ListItem>\n        ))}\n      </List>\n      <Typography>Or, alternatively:</Typography>\n      <List>\n        <ListItem component={Link} button to=\"/create\">\n          <ListItemIcon>\n            <Add />\n          </ListItemIcon>\n          <ListItemText primary=\"Create a new game\" />\n        </ListItem>\n      </List>\n    </Box>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n} from \"@material-ui/core\";\nimport { Home, PlayArrow } from \"@material-ui/icons\";\n\nimport GetGameIndex from \"./GameIndexLoader\";\n\nlet NavDrawer = ({ open, onClose }) => {\n  const [allGames, setAllGames] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      setAllGames(await GetGameIndex());\n    })();\n  });\n\n  return (\n    <Drawer open={open} onClose={onClose}>\n      <List>\n        <ListItem component={Link} button to={\"/\"} onClick={onClose}>\n          <ListItemIcon>\n            <Home />\n          </ListItemIcon>\n          <ListItemText primary=\"Home\" />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem dense={true}>\n          <Typography variant=\"overline\">All Games</Typography>\n        </ListItem>\n        {allGames.map((g, idx) => (\n          <ListItem\n            component={Link}\n            button\n            to={`/play/${g.id}`}\n            onClick={onClose}\n            key={idx}\n          >\n            <ListItemIcon>\n              <PlayArrow />\n            </ListItemIcon>\n            <ListItemText primary={g.name} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n};\n\nexport default NavDrawer;\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Link,\n  // SwipeableDrawer,\n  // Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport NavDrawer from \"./NavDrawer\";\n\nconst useStyles = makeStyles((theme) => ({\n  navbar: {\n    marginBottom: \"1.5em\",\n  },\n}));\n\nlet NavBar = () => {\n  const classes = useStyles();\n\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  let openDrawer = () => setDrawerOpen(true);\n  let closeDrawer = () => setDrawerOpen(false);\n\n  return (\n    <>\n      <NavDrawer open={drawerOpen} onClose={closeDrawer} />\n      <AppBar position=\"static\" className={classes.navbar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={openDrawer}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"h1\">\n            <Link to={\"/\"} component={RouterLink} color=\"inherit\">\n              Sporclone\n            </Link>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport {\n  // deepOrange,\n  // deepPurple,\n  orange,\n  purple,\n} from \"@material-ui/core/colors\";\n\nconst Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: orange[\"800\"],\n    },\n    secondary: {\n      main: purple[\"800\"],\n    },\n  },\n});\n\nexport default Theme;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { Box, CircularProgress, Typography } from \"@material-ui/core\";\nimport { Error } from \"@material-ui/icons\";\n\nimport GetGameIndex from \"./GameIndexLoader\";\nimport { BaseURL } from \"../Const\";\n\nlet GameLoader = ({ component: Component }) => {\n  const { gameId } = useParams();\n\n  const [allGames, setAllGames] = useState(null);\n  const [gameIdx, setGameIdx] = useState(null);\n  const [gameData, setGameData] = useState(null);\n  const [loadError, setLoadError] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const GameIndex = await GetGameIndex();\n      setAllGames(GameIndex);\n\n      let foundIdx = null;\n      for (let i = 0; i < GameIndex.length; i++) {\n        if (GameIndex[i].id === gameId) {\n          foundIdx = i;\n          break;\n        }\n      }\n\n      if (foundIdx === null) {\n        setGameData(false);\n        setLoadError(`No game exists by the ID of \"${gameId}\".`);\n        return;\n      }\n\n      setGameIdx(foundIdx);\n\n      try {\n        const response = await fetch(`${BaseURL}/games/${gameId}.json`);\n        const parsed = await response.json();\n        setGameData(parsed);\n      } catch {\n        setGameData(false);\n        setLoadError(\"Could not retrieve game template from server.\");\n      }\n    })();\n  }, [gameId]);\n\n  if (gameData) {\n    return (\n      <Component\n        gameId={gameId}\n        gameIdx={gameIdx}\n        allGames={allGames}\n        template={gameData}\n      />\n    );\n  } else if (gameData === null) {\n    return (\n      <Box style={{ textAlign: \"center\", marginTop: \"25vmin\" }}>\n        <CircularProgress size=\"30vmin\" />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h3\">\n        <Error fontSize=\"large\" /> Error\n      </Typography>\n      <Typography>\n        Sporclone could not load the game due to a problem.\n      </Typography>\n      <Typography>{loadError ?? \"An unknown error has occurred.\"}</Typography>\n    </Box>\n  );\n};\n\nexport default GameLoader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardContent,\n  Divider,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { HelpOutline, CheckCircle, Error } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    textAlign: \"center\",\n  },\n  correct: {\n    backgroundColor: theme.palette.success.light,\n    color: theme.palette.success.contrastText,\n  },\n  incorrect: {\n    backgroundColor: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n  },\n  answerContainer: {\n    paddingBottom: \"16px !important\",\n  },\n  answerText: {\n    lineHeight: 1,\n  },\n}));\n\nlet AnswerCard = ({\n  label,\n  answer,\n  showAnswer = false,\n  markCorrect = null,\n}) => {\n  const classes = useStyles();\n\n  let cardClass = classes.card;\n  if (markCorrect !== null) {\n    cardClass += \" \" + (markCorrect ? classes.correct : classes.incorrect);\n  }\n\n  return (\n    <Card variant=\"outlined\" className={cardClass}>\n      <CardContent>\n        {markCorrect !== null && (markCorrect ? <CheckCircle /> : <Error />)}\n        <Typography element=\"p\" variant=\"h6\">\n          {label}\n        </Typography>\n      </CardContent>\n      <Divider />\n      <CardContent className={classes.answerContainer}>\n        <Typography\n          variant=\"body1\"\n          paragraph={false}\n          className={classes.answerText}\n        >\n          {showAnswer ? answer : <HelpOutline />}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nAnswerCard.propTypes = {\n  label: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  showAnswer: PropTypes.bool,\n  markCorrect: PropTypes.bool,\n};\n\nexport default AnswerCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Grid, makeStyles } from \"@material-ui/core\";\nimport AnswerCard from \"./AnswerCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  unblur: {\n    filter: \"blur(0px) !important\",\n  },\n  blur: {\n    filter: \"blur(15px)\",\n    transitionProperty: \"filter\",\n    transitionDuration: \"2s\",\n    transitionTimingFunction: \"ease\",\n  },\n}));\n\nlet AnswerCardDeck = ({ questions, blur = true, showKey = false }) => {\n  const classes = useStyles();\n\n  let cards = [];\n  for (let question of questions) {\n    cards.push({\n      label: question.label,\n      answer: question.answer,\n      showAnswer: showKey || question.isCorrect,\n      markCorrect: showKey ? question.isCorrect : null,\n    });\n  }\n\n  return (\n    <Box className={`${classes.blur} ${!blur ? classes.unblur : \"\"}`}>\n      <Grid container spacing={1}>\n        {cards.map((card, idx) => (\n          <Grid item xs={6} sm={4} md={3} lg={2} key={idx}>\n            <AnswerCard {...card} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n};\n\nAnswerCardDeck.propTypes = {\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      answer: PropTypes.string.isRequired,\n      isCorrect: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  showKey: PropTypes.bool,\n};\n\nexport default AnswerCardDeck;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Grid,\n  TextField,\n  Typography,\n  makeStyles,\n  styled,\n} from \"@material-ui/core\";\nimport AnswerCardDeck from \"./AnswerCardDeck\";\nimport { Link } from \"react-router-dom\";\nimport { Edit } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  headerImg: {\n    maxWidth: 82,\n    maxHeight: 82,\n    border: `1px solid ${theme.palette.grey[500]}`,\n  },\n  otherGames: {\n    borderLeft: `1px solid ${theme.palette.grey[300]}`,\n  },\n  timerWarning: {\n    color: theme.palette.error.main,\n    fontWeight: \"bold\",\n  },\n  center: {\n    textAlign: \"center\",\n  },\n}));\n\nconst Section = styled(Box)({\n  margin: \"1em 0\",\n});\n\nlet secondsToTime = (t) => {\n  if (t < 0) t = 0;\n\n  const m = `${Math.floor(t / 60)}`;\n  const s = `${t % 60}`.padStart(2, \"0\");\n\n  return `${m}:${s}`;\n};\n\nlet Game = ({\n  gameId,\n  headline,\n  image,\n  questionStatus,\n  otherGames,\n  wasStarted,\n  gameOver,\n  timeLeft,\n  score,\n  onGuess,\n  onButton,\n}) => {\n  const classes = useStyles();\n\n  const handleGuess = (event) => {\n    const input = event.target;\n    const guess = input.value;\n    const correct = onGuess(guess);\n\n    if (correct) {\n      input.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <Section>\n        <Grid container spacing={2}>\n          {image && image.src && image.alt && (\n            <Grid item xs={\"auto\"}>\n              <img\n                className={classes.headerImg}\n                src={image.src}\n                alt={image.alt}\n              />\n            </Grid>\n          )}\n          <Grid item xs={8}>\n            <Typography variant=\"h4\" component=\"h2\">\n              {headline}\n            </Typography>\n          </Grid>\n          <Grid item className={classes.otherGames}>\n            <Typography variant=\"h6\" component=\"h3\">\n              Other Games\n            </Typography>\n            <Typography component=\"span\">\n              <ul>\n                {otherGames.map((g) => (\n                  <li key={`other-${g.id}`}>\n                    <Link to={g.id}>{g.name}</Link>\n                  </li>\n                ))}\n              </ul>\n            </Typography>\n          </Grid>\n        </Grid>\n      </Section>\n      <Divider />\n      <Section>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"center\">\n          <Grid item xs={4} sm={\"auto\"} className={classes.center}>\n            {!wasStarted ? (\n              <Button variant=\"contained\" color=\"primary\" onClick={onButton}>\n                Start Game\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={gameOver}\n                onClick={onButton}\n              >\n                Give Up\n              </Button>\n            )}\n          </Grid>\n          <Grid item xs={8} sm>\n            {wasStarted && !gameOver && (\n              <TextField\n                label=\"Enter Guess\"\n                id=\"guessField\"\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"secondary\"\n                fullWidth\n                onKeyUp={handleGuess}\n                autoFocus\n              />\n            )}\n          </Grid>\n          <Grid item xs={6} sm={2} className={classes.center}>\n            <Typography variant=\"h6\" component=\"h4\">\n              Score\n            </Typography>\n            <Typography aria-label={`${score} out of ${questionStatus.length}`}>\n              {score}/{questionStatus.length}\n            </Typography>\n          </Grid>\n          <Grid item xs={6} sm={2} className={classes.center}>\n            <Typography variant=\"h6\" component=\"h4\">\n              Time\n            </Typography>\n            <Typography className={timeLeft < 16 ? classes.timerWarning : null}>\n              {secondsToTime(timeLeft)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Section>\n      <Divider />\n      <Typography variant=\"srOnly\" aria-hidden={wasStarted}>\n        Once the game has started, game tiles will appear here.\n      </Typography>\n      <Section aria-hidden={!wasStarted}>\n        <AnswerCardDeck\n          questions={questionStatus}\n          blur={!wasStarted}\n          showKey={gameOver}\n        />\n      </Section>\n      <Section>\n        <Button component={Link} to={`/edit/${gameId}`} startIcon={<Edit />}>\n          Edit this Game\n        </Button>\n      </Section>\n    </>\n  );\n};\n\nGame.propTypes = {\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n  }),\n  questionStatus: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      answer: PropTypes.string.isRequired,\n      accepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n      isCorrect: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  otherGames: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  wasStarted: PropTypes.bool.isRequired,\n  gameOver: PropTypes.bool.isRequired,\n  timeLeft: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  onGuess: PropTypes.func.isRequired,\n  onButton: PropTypes.func.isRequired,\n};\n\nexport default Game;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Game from \"./Game\";\n\nexport let makeInitialQuestionStatus = (questions) => {\n  let questionStatus = [];\n  for (let q of questions) {\n    questionStatus.push({\n      label: q.label,\n      answer: q.answers.display,\n      accepts: q.answers.accepts,\n      isCorrect: false,\n    });\n  }\n  return questionStatus;\n};\n\nlet selectOtherGames = (currentIdx, allGames) => {\n  if (!allGames || !Array.isArray(allGames)) {\n    return [];\n  }\n\n  const maxCount = 3;\n  // Must subtract one for the current game.\n  if (allGames.length - 1 <= maxCount) {\n    return [\n      ...allGames.slice(0, currentIdx),\n      ...allGames.slice(currentIdx + 1),\n    ];\n  }\n\n  const selectedGames = {};\n  while (Object.keys(selectedGames).length < maxCount) {\n    let idx = Math.floor(Math.random() * allGames.length);\n    if (idx in selectedGames || idx === currentIdx) {\n      continue;\n    }\n\n    selectedGames[idx] = allGames[idx];\n  }\n\n  return Object.values(selectedGames);\n};\n\nlet GameController = ({ gameId, gameIdx, template, allGames }) => {\n  const [questionStatus, setQuestionStatus] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [wasStarted, setWasStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [otherGames, setOtherGames] = useState([]);\n  const [score, setScore] = useState(0);\n\n  // Reset the game state when the props change.\n  useEffect(() => {\n    setQuestionStatus(makeInitialQuestionStatus(template.questions));\n    setTimeLeft(template.time);\n    setWasStarted(false);\n    setGameOver(false);\n    setOtherGames(selectOtherGames(gameIdx, allGames));\n    setScore(0);\n  }, [gameIdx, template, allGames]);\n\n  useEffect(() => {\n    if (wasStarted && !gameOver) {\n      let timerRef = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n        if (timeLeft < 1) {\n          setGameOver(true);\n        }\n      }, 1000);\n\n      return () => {\n        clearTimeout(timerRef);\n      };\n    }\n  }, [wasStarted, gameOver, timeLeft]);\n\n  let submitGuess = (guess) => {\n    if (!wasStarted || gameOver) return false;\n\n    for (const [idx, q] of questionStatus.entries()) {\n      if (q.isCorrect) continue;\n\n      for (const answer of q.accepts) {\n        if (guess.toLowerCase() === answer.toLowerCase()) {\n          // Make a deep copy of the status to respect immutability.\n          let updatedQuestionStatus = JSON.parse(\n            JSON.stringify(questionStatus)\n          );\n          updatedQuestionStatus[idx].isCorrect = true;\n          setQuestionStatus(updatedQuestionStatus);\n\n          let updatedScore = score + 1;\n          setScore(updatedScore);\n\n          if (updatedScore === questionStatus.length) {\n            setGameOver(true);\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  let handleButton = () => {\n    if (!wasStarted) {\n      setWasStarted(true);\n    } else if (!gameOver) {\n      setGameOver(true);\n    }\n  };\n\n  return (\n    <Game\n      gameId={gameId}\n      headline={template.headline}\n      image={template?.image ?? null}\n      questionStatus={questionStatus}\n      otherGames={otherGames}\n      wasStarted={wasStarted}\n      gameOver={gameOver}\n      timeLeft={timeLeft}\n      score={score}\n      onGuess={submitGuess}\n      onButton={handleButton}\n    />\n  );\n};\n\nGameController.propTypes = {\n  gameIdx: PropTypes.number.isRequired,\n  template: PropTypes.shape({\n    time: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    headline: PropTypes.string.isRequired,\n    image: PropTypes.shape({\n      src: PropTypes.string.isRequired,\n      alt: PropTypes.string.isRequired,\n    }),\n    questions: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        answers: PropTypes.shape({\n          display: PropTypes.string.isRequired,\n          accepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  allGames: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default GameController;\n","import { format } from \"prettier/standalone\";\nimport parserBabel from \"prettier/parser-babel\";\n\nconst makeFileURL = ({ filename, contentType, contents }) =>\n  URL.createObjectURL(\n    new File([contents], filename, {\n      type: contentType,\n    })\n  );\n\nconst makeBlobURL = ({ contentType, contents }) =>\n  URL.createObjectURL(\n    new Blob([contents], {\n      type: contentType,\n    })\n  );\n\nconst makeDataURL = ({ contentType, contents }) =>\n  \"data:\" + contentType + \";charset=utf-8,\" + encodeURIComponent(contents);\n\nconst download = ({ filename, contents, contentType }) => {\n  const payload = {\n    filename,\n    contents,\n    contentType,\n  };\n  let url;\n\n  try {\n    url = makeFileURL(payload);\n  } catch (e) {\n    try {\n      console.warn(\"The files API is unavailable; fallback to blob API.\\n\", e);\n      url = makeBlobURL(payload);\n    } catch (e) {\n      console.warn(\"The blob API is unavailable; fallback to data URL.\\n\", e);\n      url = makeDataURL(payload);\n    }\n  }\n\n  const anchor = document.createElement(\"a\");\n  anchor.setAttribute(\"href\", url);\n  anchor.setAttribute(\"download\", filename);\n\n  document.body.appendChild(anchor);\n  anchor.click();\n  document.body.removeChild(anchor);\n};\n\nexport const downloadAsJSON = ({ filename, object }) => {\n  const out = format(JSON.stringify(object), {\n    parser: \"json\",\n    plugins: [parserBabel],\n  });\n\n  download({\n    filename: `${filename}.json`,\n    contents: out,\n    contentType: \"application/json\",\n  });\n};\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n  Link as MaterialLink,\n  styled,\n  Tooltip,\n} from \"@material-ui/core\";\nimport { Alert as BasicAlert, AlertTitle } from \"@material-ui/lab\";\nimport ChipInput from \"material-ui-chip-input\";\nimport {\n  Add,\n  ArrowDownward,\n  ArrowUpward,\n  Delete,\n  FileCopy,\n  GetApp,\n} from \"@material-ui/icons\";\n\nconst Alert = styled(BasicAlert)({\n  marginBottom: \"1em\",\n});\n\nconst Section = styled(Box)({\n  margin: \"2em 0\",\n});\n\nlet Editor = ({\n  game,\n  invalid,\n  wasSubmitted,\n  updateField,\n  onSubmit,\n  addQuestion,\n  duplicateQuestion,\n  deleteQuestion,\n  moveQuestion,\n}) => {\n  const fieldHasError = (fieldName) => {\n    return invalid[fieldName] ? true : false;\n  };\n\n  const updateAcceptedAnswers = (fieldPrefix, values, op) => {\n    const doUpdate = updateField(`${fieldPrefix}.answers.accepts`);\n    return (chip, answerIdx = null) => {\n      let updatedValues = [...values];\n\n      if (op === \"add\") {\n        updatedValues.push(chip);\n      } else if (op === \"delete\") {\n        updatedValues.splice(answerIdx, 1);\n      } else {\n        throw new Error(\n          `Invalid operation for accepted answer update: '${op}'.`\n        );\n      }\n\n      doUpdate({\n        target: {\n          value: updatedValues,\n        },\n      });\n    };\n  };\n\n  const isImageRequired = () =>\n    game.image.src.length > 0 || game.image.alt.length > 0;\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Game Editor\n      </Typography>\n      {(Object.keys(invalid).length > 0 && (\n        <Alert severity=\"error\">\n          <AlertTitle>Game Contains Errors</AlertTitle>\n          The game cannot be downloaded because either required fields are blank\n          or some field contains incorrect data.\n          <br />\n          Please review the highlighted fields and alert messages, resolve the\n          problems, and try to download again.\n          <br />\n          <br />\n          This alert will disappear automatically once the errors are resolved.\n        </Alert>\n      )) ||\n        (wasSubmitted && (\n          <Alert severity=\"success\">\n            <AlertTitle>Game Ready</AlertTitle>\n            The game contains zero errors and is ready for download.\n          </Alert>\n        ))}\n      <Typography variant=\"subtitle1\" component=\"p\">\n        The presence of * indicates required fields.\n      </Typography>\n      <Section>\n        <Typography variant=\"h5\" component=\"h3\" gutterBottom>\n          Header\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"gameIDField\"\n              label=\"Game ID\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              fullWidth\n              InputProps={{ style: { fontFamily: \"monospace\" } }}\n              required\n              helperText={\n                invalid[\"id\"] ??\n                \"This is a globally unique identifier for this game. \" +\n                  \"It must consist of strictly lowercase alphanumeric \" +\n                  \"characters and underscores.\"\n              }\n              value={game.id}\n              onChange={updateField(\"id\")}\n              error={fieldHasError(\"id\")}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"titleField\"\n              label=\"Title\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              fullWidth\n              required\n              helperText={\n                invalid[\"title\"] ??\n                \"The shorter title of the game displayed in menus.\"\n              }\n              value={game.title}\n              onChange={updateField(\"title\")}\n              error={fieldHasError(\"title\")}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"headlineField\"\n              label=\"Headline\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              fullWidth\n              required\n              helperText={\n                invalid[\"headline\"] ??\n                \"The extended description of what the player is tasked \" +\n                  \"with entering.\"\n              }\n              value={game.headline}\n              onChange={updateField(\"headline\")}\n              error={fieldHasError(\"headline\")}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"imageSrcField\"\n              label=\"Image Source\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              fullWidth\n              required={isImageRequired()}\n              helperText={invalid[\"image.src\"] ?? \"\"}\n              value={game.image.src}\n              onChange={updateField(\"image.src\")}\n              error={fieldHasError(\"image.src\")}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"imageAltField\"\n              label=\"Image Alt Text\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              fullWidth\n              required={isImageRequired()}\n              helperText={invalid[\"image.alt\"] ?? \"\"}\n              value={game.image.alt}\n              onChange={updateField(\"image.alt\")}\n              error={fieldHasError(\"image.alt\")}\n            />\n          </Grid>\n        </Grid>\n      </Section>\n      <Section>\n        <Typography variant=\"h5\" component=\"h3\" gutterBottom={true}>\n          Game Settings\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              id=\"timeField\"\n              label=\"Time Limit\"\n              type=\"number\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              fullWidth\n              required\n              helperText={invalid[\"time\"] ?? \"\"}\n              value={game.time}\n              onChange={updateField(\"time\")}\n              error={fieldHasError(\"time\")}\n            />\n          </Grid>\n        </Grid>\n      </Section>\n      <Section>\n        <Typography variant=\"h5\" component=\"h3\" gutterBottom>\n          Questions\n        </Typography>\n\n        {invalid[\"questions\"] && (\n          <Alert severity=\"error\" style={{ marginBottom: \"1em\" }}>\n            {invalid[\"questions\"]}\n          </Alert>\n        )}\n\n        {game.questions.map((q, idx) => {\n          const fieldPrefix = `questions[${idx}]`;\n\n          return (\n            <Card\n              variant=\"outlined\"\n              key={q.id}\n              style={{\n                marginBottom: idx !== game.questions.length - 1 ? \"1em\" : 0,\n              }}\n            >\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h4\" gutterBottom>\n                  Question {idx + 1}\n                </Typography>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      id={`question${idx + 1}LabelField`}\n                      variant=\"outlined\"\n                      color=\"secondary\"\n                      label=\"Displayed Question\"\n                      fullWidth\n                      required\n                      helperText={invalid[`${fieldPrefix}.label`] ?? \"\"}\n                      value={q.label}\n                      onChange={updateField(`${fieldPrefix}.label`)}\n                      error={fieldHasError(`${fieldPrefix}.label`)}\n                      inputProps={{\n                        \"aria-label\": `Question ${idx + 1} Displayed Question`,\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      id={`question${idx + 1}DisplayedAnswerField`}\n                      variant=\"outlined\"\n                      color=\"secondary\"\n                      label=\"Displayed Answer\"\n                      fullWidth\n                      required\n                      helperText={\n                        invalid[`${fieldPrefix}.answers.display`] ?? \"\"\n                      }\n                      value={q.answers.display}\n                      onChange={updateField(`${fieldPrefix}.answers.display`)}\n                      error={fieldHasError(`${fieldPrefix}.answers.display`)}\n                      inputProps={{\n                        \"aria-label\": `Question ${idx + 1} Displayed Answer`,\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <ChipInput\n                      id={`question${idx + 1}AcceptedAnswersField`}\n                      variant=\"outlined\"\n                      color=\"secondary\"\n                      label=\"Accepted Answers\"\n                      fullWidth\n                      required\n                      helperText={\n                        invalid[`${fieldPrefix}.answers.accepts`] ??\n                        \"The list of accepted answers does not include the \" +\n                          \"displayed answer unless it is also included here.\"\n                      }\n                      value={q.answers.accepts}\n                      onAdd={updateAcceptedAnswers(\n                        fieldPrefix,\n                        q.answers.accepts,\n                        \"add\"\n                      )}\n                      onDelete={updateAcceptedAnswers(\n                        fieldPrefix,\n                        q.answers.accepts,\n                        \"delete\"\n                      )}\n                      error={fieldHasError(`${fieldPrefix}.answers.accepts`)}\n                      InputProps={{\n                        inputProps: {\n                          \"aria-label\": `Question ${idx + 1} Accepted Answers`,\n                        },\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n              </CardContent>\n              <CardActions disableSpacing>\n                <Tooltip title=\"Delete\">\n                  <IconButton aria-label=\"delete\" onClick={deleteQuestion(idx)}>\n                    <Delete />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Move Question Up\">\n                  <Box>\n                    <IconButton\n                      aria-label=\"move up\"\n                      onClick={moveQuestion(idx, \"up\")}\n                      disabled={idx === 0}\n                    >\n                      <ArrowUpward />\n                    </IconButton>\n                  </Box>\n                </Tooltip>\n                <Tooltip title=\"Move Question Down\">\n                  <Box>\n                    <IconButton\n                      aria-label=\"move down\"\n                      onClick={moveQuestion(idx, \"down\")}\n                      disabled={idx === game.questions.length - 1}\n                    >\n                      <ArrowDownward />\n                    </IconButton>\n                  </Box>\n                </Tooltip>\n                <Tooltip title=\"Duplicate Question\">\n                  <IconButton\n                    aria-label=\"duplicate question\"\n                    onClick={duplicateQuestion(idx)}\n                  >\n                    <FileCopy />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add Question Above\">\n                  <IconButton\n                    aria-label=\"add question above\"\n                    onClick={addQuestion(idx)}\n                  >\n                    <Add />\n                  </IconButton>\n                </Tooltip>\n              </CardActions>\n            </Card>\n          );\n        })}\n        <Tooltip title=\"Add Question\">\n          <IconButton aria-label=\"add question\" onClick={addQuestion()}>\n            <Add />\n          </IconButton>\n        </Tooltip>\n      </Section>\n      <Typography variant=\"srOnly\" component=\"h3\" gutterBottom>\n        Download\n      </Typography>\n      <Alert severity=\"info\">\n        <AlertTitle>All Finished. What Next?</AlertTitle>\n        <Typography gutterBottom>\n          All games on the site are stored as JSON files in the\n          <MaterialLink\n            href=\"https://github.com/BenJetson/sporclone-react/tree/main/public/games\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            &nbsp;games folder&nbsp;\n          </MaterialLink>\n          of the GitHub repository. In order for the game to be added, modified,\n          or deleted you must submit a pull request to the repository to alter\n          the relevant file.\n        </Typography>\n        <Typography gutterBottom>\n          You can download the game in the proper file format using the button\n          below.\n        </Typography>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={onSubmit}\n          startIcon={<GetApp />}\n        >\n          Download\n        </Button>\n      </Alert>\n    </Box>\n  );\n};\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport { v4 as makeUUID } from \"uuid\";\nimport { downloadAsJSON } from \"../Download\";\nimport Editor from \"./Editor\";\n\nconst makeBlankQuestion = () => ({\n  id: makeUUID().toUpperCase(),\n  label: \"\",\n  answers: {\n    display: \"\",\n    accepts: [],\n  },\n});\n\nconst makeBlankGame = () => ({\n  id: \"\",\n  time: 0,\n  title: \"\",\n  headline: \"\",\n  image: {\n    src: \"\",\n    alt: \"\",\n  },\n  questions: [makeBlankQuestion()],\n});\n\nconst makeGameEditable = (gameIdx, template, allGames) => {\n  if (!template) {\n    return null;\n  }\n\n  let id = allGames?.[gameIdx]?.id ?? null;\n  if (!id) {\n    return null;\n  }\n\n  let game = JSON.parse(JSON.stringify(template));\n\n  game.id = id;\n\n  for (let i = 0; i < game.questions.length; i++) {\n    game.questions[i].id = makeUUID().toUpperCase();\n  }\n\n  return game;\n};\n\nlet EditorController = ({ gameIdx, template, allGames }) => {\n  const [game, updateGame] = useState(\n    makeGameEditable(gameIdx, template, allGames) ?? makeBlankGame()\n  );\n  const [wasSubmitted, setWasSubmitted] = useState(false);\n  const [invalid, updateInvalid] = useState({});\n\n  const makeDeepCopyOfGame = () => JSON.parse(JSON.stringify(game));\n\n  const validateGame = ({ g = game, force = false }) => {\n    if (!wasSubmitted && !force) {\n      return;\n    }\n\n    let updatedInvalid = {};\n\n    for (let field of [\"id\", \"title\", \"headline\"]) {\n      if (g[field].length < 1) {\n        updatedInvalid[field] = \"This field cannot be blank.\";\n      }\n    }\n\n    if (g.image.src.length > 0 || g.image.alt.length > 0) {\n      for (let field of [\"src\", \"alt\"]) {\n        if (g.image[field].length < 1) {\n          updatedInvalid[`image.${field}`] =\n            \"If one image field has a value, both must be filled.\";\n        }\n      }\n    }\n\n    if (g.time < 15) {\n      updatedInvalid[\"time\"] = \"Time cannot be less than fifteen seconds.\";\n    }\n\n    if (g.questions.length < 3) {\n      updatedInvalid[\"questions\"] = \"Must have a minumum of three questions.\";\n    }\n\n    for (let i = 0; i < g.questions.length; i++) {\n      const fieldPrefix = `questions[${i}]`;\n\n      if (g.questions[i].label.length < 1) {\n        updatedInvalid[`${fieldPrefix}.label`] = \"This field cannot be blank.\";\n      }\n\n      if (g.questions[i].answers.display.length < 1) {\n        updatedInvalid[`${fieldPrefix}.answers.display`] =\n          \"This field cannot be blank.\";\n      }\n\n      if (g.questions[i].answers.accepts.length < 1) {\n        updatedInvalid[`${fieldPrefix}.answers.accepts`] =\n          \"Must have at least one accepted answer.\";\n      }\n    }\n\n    updateInvalid(updatedInvalid);\n    return Object.keys(updatedInvalid).length === 0;\n  };\n\n  /**\n   * @param {string} fieldName the name of the field to be updated.\n   */\n  const onFieldChange = (fieldName) => {\n    return (event) => {\n      /** @type string | array | null */\n      let value = event?.target?.value ?? null;\n      if (value === null) {\n        throw new Error(`Received null value for update of '${fieldName}'.`);\n      }\n\n      let updatedGame = makeDeepCopyOfGame();\n      if ([\"id\", \"title\", \"headline\", \"time\"].includes(fieldName)) {\n        if (fieldName === \"time\") value = value !== \"\" ? parseInt(value) : 0;\n\n        updatedGame[fieldName] = value;\n      } else if (fieldName.includes(\"image\")) {\n        // +2 to account for the extra dot after the image\n        fieldName = fieldName.substring(fieldName.lastIndexOf(\".\") + 1);\n\n        if ([\"src\", \"alt\"].includes(fieldName)) {\n          updatedGame.image[fieldName] = value;\n        } else {\n          throw new Error(\n            `Bad image field '${fieldName}' for attempted update.`\n          );\n        }\n      } else if (fieldName.includes(\"questions\")) {\n        const idx = parseInt(\n          fieldName.substring(\n            fieldName.lastIndexOf(\"[\") + 1,\n            fieldName.lastIndexOf(\"]\")\n          )\n        );\n\n        // +2 to account for the extra dot after the ]\n        fieldName = fieldName.substring(fieldName.lastIndexOf(\"]\") + 2);\n\n        if (!fieldName.includes(\".\")) {\n          updatedGame.questions[idx][fieldName] = value;\n        } else if (fieldName === \"answers.display\") {\n          updatedGame.questions[idx].answers.display = value;\n        } else if (fieldName === \"answers.accepts\") {\n          updatedGame.questions[idx].answers.accepts = value;\n        } else {\n          throw new Error(\n            `Bad question field '${fieldName}' for attempted update.`\n          );\n        }\n      } else {\n        throw new Error(`Bad field name '${fieldName}' for attempted update.`);\n      }\n\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onAddQuestion = (atIndex = null) => {\n    return () => {\n      let updatedGame = makeDeepCopyOfGame();\n      if (atIndex === null) {\n        updatedGame.questions.push(makeBlankQuestion());\n      } else {\n        updatedGame.questions.splice(atIndex, 0, makeBlankQuestion());\n      }\n\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onDuplicateQuestion = (atIndex) => {\n    return () => {\n      let updatedGame = makeDeepCopyOfGame();\n      let copyOfQuestion = JSON.parse(\n        JSON.stringify(updatedGame.questions[atIndex])\n      );\n\n      copyOfQuestion.id = makeUUID();\n\n      updatedGame.questions.splice(atIndex, 0, copyOfQuestion);\n\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onMoveQuestion = (idx, direction) => {\n    return () => {\n      let destIdx;\n      switch (direction) {\n        case \"up\":\n          destIdx = idx - 1;\n          break;\n        case \"down\":\n          destIdx = idx + 1;\n          break;\n        default:\n          throw new Error(`Invlid direction to move question: '${direction}'`);\n      }\n\n      let updatedGame = makeDeepCopyOfGame();\n\n      let placeholder = updatedGame.questions[destIdx];\n      updatedGame.questions[destIdx] = updatedGame.questions[idx];\n      updatedGame.questions[idx] = placeholder;\n\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onDeleteQuestion = (idx) => {\n    return () => {\n      let updatedGame = makeDeepCopyOfGame();\n      updatedGame.questions.splice(idx, 1);\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onSubmit = () => {\n    setWasSubmitted(true);\n    if (!validateGame({ force: true })) {\n      // Scroll to the top of the page to show the error banner.\n      window.scrollTo(0, 0);\n\n      return;\n    }\n\n    let gameToDownload = makeDeepCopyOfGame();\n    delete gameToDownload.id;\n    for (let i = 0; i < gameToDownload.questions.length; i++) {\n      delete gameToDownload.questions[i].id;\n    }\n    if (gameToDownload.image.src.length < 1) {\n      delete gameToDownload.image;\n    }\n\n    downloadAsJSON({\n      filename: game.id,\n      object: gameToDownload,\n    });\n  };\n\n  return (\n    <Editor\n      game={game}\n      invalid={invalid}\n      wasSubmitted={wasSubmitted}\n      updateField={onFieldChange}\n      onSubmit={onSubmit}\n      addQuestion={onAddQuestion}\n      duplicateQuestion={onDuplicateQuestion}\n      deleteQuestion={onDeleteQuestion}\n      moveQuestion={onMoveQuestion}\n    />\n  );\n};\n\nexport default EditorController;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, ThemeProvider } from \"@material-ui/core\";\n\nimport ScrollSpy from \"./components/ScrollSpy\";\nimport Home from \"./components/Home\";\nimport NavBar from \"./components/NavBar\";\nimport Theme from \"./Theme\";\n\nimport GameLoader from \"./components/GameLoader\";\nimport GameController from \"./components/GameController\";\nimport EditorController from \"./components/EditorController\";\n\nlet App = () => {\n  return (\n    <ThemeProvider theme={Theme}>\n      <Router>\n        <ScrollSpy />\n        <NavBar />\n        <Container>\n          <Switch>\n            <Route\n              path={\"/play/:gameId\"}\n              children={<GameLoader component={GameController} />}\n            />\n            <Route path={\"/create\"}>\n              <EditorController />\n            </Route>\n            <Route\n              path={\"/edit/:gameId\"}\n              children={<GameLoader component={EditorController} />}\n            />\n            <Route path={\"/\"} key=\"home\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}