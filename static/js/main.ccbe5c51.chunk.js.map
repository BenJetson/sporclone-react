{"version":3,"sources":["components/Home.js","components/NavDrawer.js","components/NavBar.js","Theme.js","components/GameLoader.js","Const.js","components/AnswerCard.js","components/AnswerCardDeck.js","components/Game.js","components/GameController.js","components/Editor.js","components/EditorController.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Box","Typography","variant","List","GameIndex","map","g","idx","ListItem","component","Link","button","to","id","ListItemText","primary","name","NavDrawer","open","onClose","Drawer","onClick","ListItemIcon","Divider","dense","useStyles","makeStyles","theme","navbar","marginBottom","NavBar","classes","useState","drawerOpen","setDrawerOpen","AppBar","position","className","Toolbar","IconButton","edge","color","aria-label","Menu","RouterLink","Theme","createMuiTheme","palette","main","orange","secondary","purple","GameLoader","Component","gameId","useParams","gameIdx","setGameIdx","gameData","setGameData","loadError","setLoadError","useEffect","foundIdx","i","length","findGameIdx","a","fetch","response","json","parsed","allGames","template","style","textAlign","marginTop","CircularProgress","size","fontSize","card","correct","backgroundColor","success","light","contrastText","incorrect","error","answerContainer","paddingBottom","answerText","lineHeight","AnswerCard","label","answer","showAnswer","markCorrect","cardClass","Card","CardContent","CheckCircle","element","paragraph","HelpOutline","unblur","filter","blur","transitionProperty","transitionDuration","transitionTimingFunction","AnswerCardDeck","questions","showKey","cards","question","push","isCorrect","Grid","container","spacing","item","xs","sm","md","lg","headerImg","maxWidth","maxHeight","border","grey","otherGames","borderLeft","timerWarning","fontWeight","center","Section","styled","margin","secondsToTime","t","m","Math","floor","s","padStart","Game","headline","image","questionStatus","wasStarted","gameOver","timeLeft","score","onGuess","onButton","src","alt","alignItems","justify","Button","disabled","TextField","fullWidth","onKeyUp","event","input","target","guess","value","autoFocus","GameController","setQuestionStatus","setTimeLeft","setWasStarted","setGameOver","setOtherGames","setScore","q","answers","display","accepts","makeInitialQuestionStatus","time","currentIdx","Array","isArray","slice","selectedGames","Object","keys","random","values","selectOtherGames","timerRef","setTimeout","clearTimeout","entries","toLowerCase","updatedQuestionStatus","JSON","parse","stringify","updatedScore","InputGroupCard","Alert","BasicAlert","Editor","game","invalid","wasSubmitted","updateField","onSubmit","addQuestion","deleteQuestion","moveQuestion","fieldHasError","fieldName","updateAcceptedAnswers","fieldPrefix","op","doUpdate","chip","answerIdx","updatedValues","Error","splice","isImageRequired","severity","AlertTitle","gutterBottom","InputProps","fontFamily","required","helperText","onChange","title","type","onAdd","onDelete","CardActions","disableSpacing","Delete","ArrowUpward","ArrowDownward","Add","makeBlankQuestion","makeUUID","toUpperCase","accept","EditorController","makeGameEditable","updateGame","setWasSubmitted","updateInvalid","makeDeepCopyOfGame","validateGame","force","updatedInvalid","field","updatedGame","includes","parseInt","substring","lastIndexOf","console","log","gameToDownload","out","format","parserBabel","anchor","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","window","scrollTo","direction","destIdx","placeholder","App","ThemeProvider","Container","path","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ccbe5c51.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nimport GameIndex from \"../games/index.json\";\n\nlet Home = () => (\n  <Box>\n    <Typography variant=\"h2\">Welcome to Sporclone!</Typography>\n    <Typography>Select a game to play from the list below.</Typography>\n    <List>\n      {GameIndex.map((g, idx) => (\n        <ListItem component={Link} button to={`/play/${g.id}`} key={idx}>\n          <ListItemText primary={g.name} />\n        </ListItem>\n      ))}\n    </List>\n  </Box>\n);\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Typography,\n} from \"@material-ui/core\";\nimport GameIndex from \"../games/index.json\";\nimport { Home } from \"@material-ui/icons\";\n\nlet NavDrawer = ({ open, onClose }) => {\n  return (\n    <Drawer open={open} onClose={onClose}>\n      <List>\n        <ListItem component={Link} button to={\"/\"} onClick={onClose}>\n          <ListItemIcon>\n            <Home />\n          </ListItemIcon>\n          <ListItemText primary=\"Home\" />\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem dense={true}>\n          <Typography variant=\"overline\">All Games</Typography>\n        </ListItem>\n        {GameIndex.map((g, idx) => (\n          <ListItem\n            component={Link}\n            button\n            to={`/play/${g.id}`}\n            onClick={onClose}\n            key={idx}\n          >\n            <ListItemText primary={g.name} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n};\n\nexport default NavDrawer;\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Link,\n  // SwipeableDrawer,\n  // Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport NavDrawer from \"./NavDrawer\";\n\nconst useStyles = makeStyles((theme) => ({\n  navbar: {\n    marginBottom: \"1.5em\",\n  },\n}));\n\nlet NavBar = () => {\n  const classes = useStyles();\n\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  let openDrawer = () => setDrawerOpen(true);\n  let closeDrawer = () => setDrawerOpen(false);\n\n  return (\n    <>\n      <NavDrawer open={drawerOpen} onClose={closeDrawer} />\n      <AppBar position=\"static\" className={classes.navbar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={openDrawer}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"h1\">\n            <Link to={\"/\"} component={RouterLink} color=\"inherit\">\n              Sporclone\n            </Link>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport {\n  // deepOrange,\n  // deepPurple,\n  orange,\n  purple,\n} from \"@material-ui/core/colors\";\n\nconst Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: orange[\"800\"],\n    },\n    secondary: {\n      main: purple[\"800\"],\n    },\n  },\n});\n\nexport default Theme;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { Box, CircularProgress, Typography } from \"@material-ui/core\";\nimport { Error } from \"@material-ui/icons\";\n\nimport GameIndex from \"../games/index.json\";\nimport { BaseURL } from \"../Const\";\n\nlet findGameIdx = (gameId) => {\n  for (let i = 0; i < GameIndex.length; i++) {\n    if (GameIndex[i].id === gameId) {\n      return i;\n    }\n  }\n  return null;\n};\n\nlet GameLoader = ({ component: Component }) => {\n  const { gameId } = useParams();\n\n  const [gameIdx, setGameIdx] = useState(null);\n  const [gameData, setGameData] = useState(null);\n  const [loadError, setLoadError] = useState(null);\n\n  useEffect(() => {\n    const foundIdx = findGameIdx(gameId);\n    if (foundIdx === null) {\n      setGameData(false);\n      setLoadError(`No game exists by the ID of \"${gameId}\".`);\n      return;\n    }\n\n    setGameIdx(foundIdx);\n\n    (async () => {\n      try {\n        const response = await fetch(`${BaseURL}/games/${gameId}.json`);\n        const parsed = await response.json();\n        setGameData(parsed);\n      } catch {\n        setGameData(false);\n        setLoadError(\"Could not retrieve game template from server.\");\n      }\n    })();\n  }, [gameId]);\n\n  if (gameData) {\n    return (\n      <Component gameIdx={gameIdx} allGames={GameIndex} template={gameData} />\n    );\n  } else if (gameData === null) {\n    return (\n      <Box style={{ textAlign: \"center\", marginTop: \"25vmin\" }}>\n        <CircularProgress size=\"30vmin\" />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Typography variant=\"h3\">\n        <Error fontSize=\"large\" /> Error\n      </Typography>\n      <Typography>\n        Sporclone could not load the game due to a problem.\n      </Typography>\n      <Typography>{loadError ?? \"An unknown error has occurred.\"}</Typography>\n    </Box>\n  );\n};\n\nexport default GameLoader;\n","export const BaseURL = \"/sporclone-react\";\n\n// The below is no longer necessary since \"homepage\" was set in package.json.\n//\n// if (process.env.NODE_ENV !== \"production\") {\n//   BaseURL = \"\";\n// }\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Card,\n  CardContent,\n  Divider,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { HelpOutline, CheckCircle, Error } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    textAlign: \"center\",\n  },\n  correct: {\n    backgroundColor: theme.palette.success.light,\n    color: theme.palette.success.contrastText,\n  },\n  incorrect: {\n    backgroundColor: theme.palette.error.light,\n    color: theme.palette.error.contrastText,\n  },\n  answerContainer: {\n    paddingBottom: \"16px !important\",\n  },\n  answerText: {\n    lineHeight: 1,\n  },\n}));\n\nlet AnswerCard = ({\n  label,\n  answer,\n  showAnswer = false,\n  markCorrect = null,\n}) => {\n  const classes = useStyles();\n\n  let cardClass = classes.card;\n  if (markCorrect !== null) {\n    cardClass += \" \" + (markCorrect ? classes.correct : classes.incorrect);\n  }\n\n  return (\n    <Card variant=\"outlined\" className={cardClass}>\n      <CardContent>\n        {markCorrect !== null && (markCorrect ? <CheckCircle /> : <Error />)}\n        <Typography element=\"p\" variant=\"h6\">\n          {label}\n        </Typography>\n      </CardContent>\n      <Divider />\n      <CardContent className={classes.answerContainer}>\n        <Typography\n          variant=\"body1\"\n          paragraph={false}\n          className={classes.answerText}\n        >\n          {showAnswer ? answer : <HelpOutline />}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nAnswerCard.propTypes = {\n  label: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  showAnswer: PropTypes.bool,\n  markCorrect: PropTypes.bool,\n};\n\nexport default AnswerCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Grid, makeStyles } from \"@material-ui/core\";\nimport AnswerCard from \"./AnswerCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  unblur: {\n    filter: \"blur(0px) !important\",\n  },\n  blur: {\n    filter: \"blur(15px)\",\n    transitionProperty: \"filter\",\n    transitionDuration: \"2s\",\n    transitionTimingFunction: \"ease\",\n  },\n}));\n\nlet AnswerCardDeck = ({ questions, blur = true, showKey = false }) => {\n  const classes = useStyles();\n\n  let cards = [];\n  for (let question of questions) {\n    cards.push({\n      label: question.label,\n      answer: question.answer,\n      showAnswer: showKey || question.isCorrect,\n      markCorrect: showKey ? question.isCorrect : null,\n    });\n  }\n\n  return (\n    <Box className={`${classes.blur} ${!blur ? classes.unblur : \"\"}`}>\n      <Grid container spacing={1}>\n        {cards.map((card, idx) => (\n          <Grid item xs={6} sm={4} md={3} lg={2} key={idx}>\n            <AnswerCard {...card} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n};\n\nAnswerCardDeck.propTypes = {\n  questions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      answer: PropTypes.string.isRequired,\n      isCorrect: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  showKey: PropTypes.bool,\n};\n\nexport default AnswerCardDeck;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Grid,\n  TextField,\n  Typography,\n  makeStyles,\n  styled,\n} from \"@material-ui/core\";\nimport AnswerCardDeck from \"./AnswerCardDeck\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  headerImg: {\n    maxWidth: 82,\n    maxHeight: 82,\n    border: `1px solid ${theme.palette.grey[500]}`,\n  },\n  otherGames: {\n    borderLeft: `1px solid ${theme.palette.grey[300]}`,\n  },\n  timerWarning: {\n    color: theme.palette.error.main,\n    fontWeight: \"bold\",\n  },\n  center: {\n    textAlign: \"center\",\n  },\n}));\n\nconst Section = styled(Box)({\n  margin: \"1em 0\",\n});\n\nlet secondsToTime = (t) => {\n  if (t < 0) t = 0;\n\n  const m = `${Math.floor(t / 60)}`;\n  const s = `${t % 60}`.padStart(2, \"0\");\n\n  return `${m}:${s}`;\n};\n\nlet Game = ({\n  headline,\n  image,\n  questionStatus,\n  otherGames,\n  wasStarted,\n  gameOver,\n  timeLeft,\n  score,\n  onGuess,\n  onButton,\n}) => {\n  const classes = useStyles();\n\n  const handleGuess = (event) => {\n    const input = event.target;\n    const guess = input.value;\n    const correct = onGuess(guess);\n\n    if (correct) {\n      input.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <Section>\n        <Grid container spacing={2}>\n          {image && image.src && image.alt && (\n            <Grid item xs={\"auto\"}>\n              <img\n                className={classes.headerImg}\n                src={image.src}\n                alt={image.alt}\n              />\n            </Grid>\n          )}\n          <Grid item xs={8}>\n            <Typography variant=\"h4\" component=\"h1\">\n              {headline}\n            </Typography>\n          </Grid>\n          <Grid item className={classes.otherGames}>\n            <Typography variant=\"h6\" component=\"h3\">\n              Other Games\n            </Typography>\n            <Typography component=\"span\">\n              <ul>\n                {otherGames.map((g) => (\n                  <li key={`other-${g.id}`}>\n                    <Link to={g.id}>{g.name}</Link>\n                  </li>\n                ))}\n              </ul>\n            </Typography>\n          </Grid>\n        </Grid>\n      </Section>\n      <Divider />\n      <Section>\n        <Grid container spacing={2} alignItems=\"center\" justify=\"center\">\n          <Grid item xs={4} sm={\"auto\"} className={classes.center}>\n            {!wasStarted ? (\n              <Button variant=\"contained\" color=\"primary\" onClick={onButton}>\n                Start Game\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={gameOver}\n                onClick={onButton}\n              >\n                Give Up\n              </Button>\n            )}\n          </Grid>\n          <Grid item xs={8} sm>\n            {wasStarted && !gameOver && (\n              <TextField\n                label=\"Enter Guess\"\n                variant=\"outlined\"\n                size=\"small\"\n                color=\"secondary\"\n                fullWidth\n                onKeyUp={handleGuess}\n                autoFocus\n              />\n            )}\n          </Grid>\n          <Grid item xs={6} sm={2} className={classes.center}>\n            <Typography variant=\"h6\" component=\"h4\">\n              Score\n            </Typography>\n            <Typography>\n              {score}/{questionStatus.length}\n            </Typography>\n          </Grid>\n          <Grid item xs={6} sm={2} className={classes.center}>\n            <Typography variant=\"h6\" component=\"h4\">\n              Time\n            </Typography>\n            <Typography className={timeLeft < 16 ? classes.timerWarning : null}>\n              {secondsToTime(timeLeft)}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Section>\n      <Divider />\n      <Section>\n        <AnswerCardDeck\n          questions={questionStatus}\n          blur={!wasStarted}\n          showKey={gameOver}\n        />\n      </Section>\n    </>\n  );\n};\n\nGame.propTypes = {\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired,\n  }),\n  questionStatus: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      answer: PropTypes.string.isRequired,\n      accepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n      isCorrect: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  otherGames: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  wasStarted: PropTypes.bool.isRequired,\n  gameOver: PropTypes.bool.isRequired,\n  timeLeft: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  onGuess: PropTypes.func.isRequired,\n  onButton: PropTypes.func.isRequired,\n};\n\nexport default Game;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Game from \"./Game\";\n\nexport let makeInitialQuestionStatus = (questions) => {\n  let questionStatus = [];\n  for (let q of questions) {\n    questionStatus.push({\n      label: q.label,\n      answer: q.answers.display,\n      accepts: q.answers.accepts,\n      isCorrect: false,\n    });\n  }\n  return questionStatus;\n};\n\nlet selectOtherGames = (currentIdx, allGames) => {\n  if (!allGames || !Array.isArray(allGames)) {\n    return [];\n  }\n\n  const maxCount = 3;\n  // Must subtract one for the current game.\n  if (allGames.length - 1 <= maxCount) {\n    return [\n      ...allGames.slice(0, currentIdx),\n      ...allGames.slice(currentIdx + 1),\n    ];\n  }\n\n  const selectedGames = {};\n  while (Object.keys(selectedGames).length < maxCount) {\n    let idx = Math.floor(Math.random() * allGames.length);\n    if (idx in selectedGames || idx === currentIdx) {\n      continue;\n    }\n\n    selectedGames[idx] = allGames[idx];\n  }\n\n  return Object.values(selectedGames);\n};\n\nlet GameController = ({ gameIdx, template, allGames }) => {\n  const [questionStatus, setQuestionStatus] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [wasStarted, setWasStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [otherGames, setOtherGames] = useState([]);\n  const [score, setScore] = useState(0);\n\n  // Reset the game state when the props change.\n  useEffect(() => {\n    setQuestionStatus(makeInitialQuestionStatus(template.questions));\n    setTimeLeft(template.time);\n    setWasStarted(false);\n    setGameOver(false);\n    setOtherGames(selectOtherGames(gameIdx, allGames));\n    setScore(0);\n  }, [gameIdx, template, allGames]);\n\n  useEffect(() => {\n    if (wasStarted && !gameOver) {\n      let timerRef = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n        if (timeLeft < 1) {\n          setGameOver(true);\n        }\n      }, 1000);\n\n      return () => {\n        clearTimeout(timerRef);\n      };\n    }\n  }, [wasStarted, gameOver, timeLeft]);\n\n  let submitGuess = (guess) => {\n    if (!wasStarted || gameOver) return false;\n\n    for (const [idx, q] of questionStatus.entries()) {\n      if (q.isCorrect) continue;\n\n      for (const answer of q.accepts) {\n        if (guess.toLowerCase() === answer.toLowerCase()) {\n          // Make a deep copy of the status to respect immutability.\n          let updatedQuestionStatus = JSON.parse(\n            JSON.stringify(questionStatus)\n          );\n          updatedQuestionStatus[idx].isCorrect = true;\n          setQuestionStatus(updatedQuestionStatus);\n\n          let updatedScore = score + 1;\n          setScore(updatedScore);\n\n          if (updatedScore === questionStatus.length) {\n            setGameOver(true);\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  let handleButton = () => {\n    if (!wasStarted) {\n      setWasStarted(true);\n    } else if (!gameOver) {\n      setGameOver(true);\n    }\n  };\n\n  return (\n    <Game\n      headline={template.headline}\n      image={template?.image ?? null}\n      questionStatus={questionStatus}\n      otherGames={otherGames}\n      wasStarted={wasStarted}\n      gameOver={gameOver}\n      timeLeft={timeLeft}\n      score={score}\n      onGuess={submitGuess}\n      onButton={handleButton}\n    />\n  );\n};\n\nGameController.propTypes = {\n  gameIdx: PropTypes.number.isRequired,\n  template: PropTypes.shape({\n    time: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    headline: PropTypes.string.isRequired,\n    image: PropTypes.shape({\n      src: PropTypes.string.isRequired,\n      alt: PropTypes.string.isRequired,\n    }),\n    questions: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        answers: PropTypes.shape({\n          display: PropTypes.string.isRequired,\n          accepts: PropTypes.arrayOf(PropTypes.string).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  allGames: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default GameController;\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  IconButton,\n  TextField,\n  Typography,\n  styled,\n} from \"@material-ui/core\";\nimport { Alert as BasicAlert, AlertTitle } from \"@material-ui/lab\";\nimport ChipInput from \"material-ui-chip-input\";\nimport { Add, ArrowDownward, ArrowUpward, Delete } from \"@material-ui/icons\";\n\nconst InputGroupCard = styled(Card)({\n  marginBottom: \"2em\",\n});\n\nconst Alert = styled(BasicAlert)({\n  marginBottom: \"1em\",\n});\n\nlet Editor = ({\n  game,\n  invalid,\n  wasSubmitted,\n  updateField,\n  onSubmit,\n  addQuestion,\n  deleteQuestion,\n  moveQuestion,\n}) => {\n  const fieldHasError = (fieldName) => {\n    return invalid[fieldName] ? true : false;\n  };\n\n  const updateAcceptedAnswers = (fieldPrefix, values, op) => {\n    const doUpdate = updateField(`${fieldPrefix}.answers.accepts`);\n    return (chip, answerIdx = null) => {\n      let updatedValues = [...values];\n\n      if (op === \"add\") {\n        updatedValues.push(chip);\n      } else if (op === \"delete\") {\n        updatedValues.splice(answerIdx, 1);\n      } else {\n        throw new Error(\n          `Invalid operation for accepted answer update: '${op}'.`\n        );\n      }\n\n      doUpdate({\n        target: {\n          value: updatedValues,\n        },\n      });\n    };\n  };\n\n  const isImageRequired = () =>\n    game.image.src.length > 0 || game.image.alt.length > 0;\n\n  return (\n    <Box>\n      {(Object.keys(invalid).length > 0 && (\n        <Alert severity=\"error\">\n          <AlertTitle>Game Contains Errors</AlertTitle>\n          The game cannot be downloaded because either required fields are blank\n          or some field contains incorrect data.\n          <br />\n          Please review the highlighted fields and alert messages, resolve the\n          problems, and try to download again.\n          <br />\n          <br />\n          This alert will disappear automatically once the errors are resolved.\n        </Alert>\n      )) ||\n        (wasSubmitted && (\n          <Alert severity=\"success\">\n            <AlertTitle>Game Ready</AlertTitle>\n            The game contains zero errors and is ready for download.\n          </Alert>\n        ))}\n      <Typography variant=\"subtitle1\" gutterBottom={true}>\n        The presence of * indicates required fields.\n      </Typography>\n      <InputGroupCard variant=\"outlined\">\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom={true}>\n            Header\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Game ID\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                InputProps={{ style: { fontFamily: \"monospace\" } }}\n                required\n                helperText={\n                  invalid[\"id\"] ??\n                  \"This is a globally unique identifier for this game. \" +\n                    \"It must consist of strictly lowercase alphanumeric \" +\n                    \"characters and underscores.\"\n                }\n                value={game.id}\n                onChange={updateField(\"id\")}\n                error={fieldHasError(\"id\")}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Title\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                required\n                helperText={\n                  invalid[\"title\"] ??\n                  \"The shorter title of the game displayed in menus.\"\n                }\n                value={game.title}\n                onChange={updateField(\"title\")}\n                error={fieldHasError(\"title\")}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                label=\"Headline\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                required\n                helperText={\n                  invalid[\"headline\"] ??\n                  \"The extended description of what the player is tasked \" +\n                    \"with entering.\"\n                }\n                value={game.headline}\n                onChange={updateField(\"headline\")}\n                error={fieldHasError(\"headline\")}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Image Source\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                required={isImageRequired()}\n                helperText={invalid[\"image.src\"] ?? \"\"}\n                value={game.image.src}\n                onChange={updateField(\"image.src\")}\n                error={fieldHasError(\"image.src\")}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Image Alt Text\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                required={isImageRequired()}\n                helperText={invalid[\"image.alt\"] ?? \"\"}\n                value={game.image.alt}\n                onChange={updateField(\"image.alt\")}\n                error={fieldHasError(\"image.alt\")}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </InputGroupCard>\n      <InputGroupCard variant=\"outlined\">\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom={true}>\n            Game Settings\n          </Typography>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Time Limit\"\n                type=\"number\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                fullWidth\n                required\n                helperText={invalid[\"time\"] ?? \"\"}\n                value={game.time}\n                onChange={updateField(\"time\")}\n                error={fieldHasError(\"time\")}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </InputGroupCard>\n      <InputGroupCard variant=\"outlined\">\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom={true}>\n            Questions\n          </Typography>\n\n          {invalid[\"questions\"] && (\n            <Alert severity=\"error\" style={{ marginBottom: \"1em\" }}>\n              {invalid[\"questions\"]}\n            </Alert>\n          )}\n\n          {game.questions.map((q, idx) => {\n            const fieldPrefix = `questions[${idx}]`;\n\n            return (\n              <Card\n                variant=\"outlined\"\n                key={q.id}\n                style={{\n                  marginBottom: idx !== game.questions.length - 1 ? \"1em\" : 0,\n                }}\n              >\n                <CardContent>\n                  <Typography variant=\"h6\" component=\"h3\" gutterBottom={true}>\n                    Question {idx + 1}\n                  </Typography>\n                  <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        label=\"Displayed Question\"\n                        fullWidth\n                        required\n                        helperText={invalid[`${fieldPrefix}.label`] ?? \"\"}\n                        value={q.label}\n                        onChange={updateField(`${fieldPrefix}.label`)}\n                        error={fieldHasError(`${fieldPrefix}.label`)}\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                      <TextField\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        label=\"Displayed Answer\"\n                        fullWidth\n                        required\n                        helperText={\n                          invalid[`${fieldPrefix}.answers.display`] ?? \"\"\n                        }\n                        value={q.answers.display}\n                        onChange={updateField(`${fieldPrefix}.answers.display`)}\n                        error={fieldHasError(`${fieldPrefix}.answers.display`)}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <ChipInput\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        label=\"Accepted Answers\"\n                        fullWidth\n                        required\n                        helperText={\n                          invalid[`${fieldPrefix}.answers.accepts`] ??\n                          \"The list of accepted answers does not include the \" +\n                            \"displayed answer unless it is also included here.\"\n                        }\n                        value={q.answers.accepts}\n                        onAdd={updateAcceptedAnswers(\n                          fieldPrefix,\n                          q.answers.accepts,\n                          \"add\"\n                        )}\n                        onDelete={updateAcceptedAnswers(\n                          fieldPrefix,\n                          q.answers.accepts,\n                          \"delete\"\n                        )}\n                        error={fieldHasError(`${fieldPrefix}.answers.accepts`)}\n                      />\n                    </Grid>\n                  </Grid>\n                </CardContent>\n                <CardActions disableSpacing>\n                  <IconButton aria-label=\"delete\" onClick={deleteQuestion(idx)}>\n                    <Delete />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"move up\"\n                    onClick={moveQuestion(idx, \"up\")}\n                    disabled={idx === 0}\n                  >\n                    <ArrowUpward />\n                  </IconButton>\n                  <IconButton\n                    aria-label=\"move down\"\n                    onClick={moveQuestion(idx, \"down\")}\n                    disabled={idx === game.questions.length - 1}\n                  >\n                    <ArrowDownward />\n                  </IconButton>\n                </CardActions>\n              </Card>\n            );\n          })}\n        </CardContent>\n        <CardActions disableSpacing>\n          <IconButton aria-label=\"add question\" onClick={addQuestion}>\n            <Add />\n          </IconButton>\n        </CardActions>\n      </InputGroupCard>\n\n      <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n        Download\n      </Button>\n    </Box>\n  );\n};\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport { v4 as makeUUID } from \"uuid\";\nimport { format } from \"prettier/standalone\";\nimport parserBabel from \"prettier/parser-babel\";\nimport Editor from \"./Editor\";\n\nconst makeBlankQuestion = () => ({\n  id: makeUUID().toUpperCase(),\n  label: \"\",\n  answers: {\n    display: \"\",\n    accept: [],\n  },\n});\n\nconst makeBlankGame = () => ({\n  id: \"\",\n  time: 0,\n  title: \"\",\n  headline: \"\",\n  image: {\n    src: \"\",\n    alt: \"\",\n  },\n  questions: [makeBlankQuestion()],\n});\n\nconst makeGameEditable = (gameIdx, template, allGames) => {\n  if (!template) {\n    return null;\n  }\n\n  let id = allGames?.[gameIdx]?.id ?? null;\n  if (!id) {\n    return null;\n  }\n\n  let game = JSON.parse(JSON.stringify(template));\n\n  game.id = id;\n\n  for (let i = 0; i < game.questions.length; i++) {\n    game.questions[i].id = makeUUID().toUpperCase();\n  }\n\n  return game;\n};\n\nlet EditorController = ({ gameIdx, template, allGames }) => {\n  const [game, updateGame] = useState(\n    makeGameEditable(gameIdx, template, allGames) ?? makeBlankGame()\n  );\n  const [wasSubmitted, setWasSubmitted] = useState(false);\n  const [invalid, updateInvalid] = useState({});\n\n  const makeDeepCopyOfGame = () => JSON.parse(JSON.stringify(game));\n\n  const validateGame = ({ g = game, force = false }) => {\n    if (!wasSubmitted && !force) {\n      return;\n    }\n\n    let updatedInvalid = {};\n\n    for (let field of [\"id\", \"title\", \"headline\"]) {\n      if (g[field].length < 1) {\n        updatedInvalid[field] = \"This field cannot be blank.\";\n      }\n    }\n\n    if (g.image.src.length > 0 || g.image.alt.length > 0) {\n      for (let field of [\"src\", \"alt\"]) {\n        if (g.image[field].length < 1) {\n          updatedInvalid[`image.${field}`] =\n            \"If one image field has a value, both must be filled.\";\n        }\n      }\n    }\n\n    if (g.time < 15) {\n      updatedInvalid[\"time\"] = \"Time cannot be less than fifteen seconds.\";\n    }\n\n    if (g.questions.length < 3) {\n      updatedInvalid[\"questions\"] = \"Must have a minumum of three questions.\";\n    }\n\n    for (let i = 0; i < g.questions.length; i++) {\n      const fieldPrefix = `questions[${i}]`;\n\n      if (g.questions[i].label.length < 1) {\n        updatedInvalid[`${fieldPrefix}.label`] = \"This field cannot be blank.\";\n      }\n\n      if (g.questions[i].answers.display.length < 1) {\n        updatedInvalid[`${fieldPrefix}.answers.display`] =\n          \"This field cannot be blank.\";\n      }\n\n      if (g.questions[i].answers.accepts.length < 1) {\n        updatedInvalid[`${fieldPrefix}.answers.accepts`] =\n          \"Must have at least one accepted answer.\";\n      }\n    }\n\n    updateInvalid(updatedInvalid);\n    return Object.keys(updatedInvalid).length === 0;\n  };\n\n  /**\n   * @param {string} fieldName the name of the field to be updated.\n   */\n  const onFieldChange = (fieldName) => {\n    return (event) => {\n      /** @type string | array | null */\n      let value = event?.target?.value ?? null;\n      if (value === null) {\n        throw new Error(`Received null value for update of '${fieldName}'.`);\n      }\n\n      let updatedGame = makeDeepCopyOfGame();\n      if ([\"id\", \"title\", \"headline\", \"time\"].includes(fieldName)) {\n        if (fieldName === \"time\") value = value !== \"\" ? parseInt(value) : 0;\n\n        updatedGame[fieldName] = value;\n      } else if (fieldName.includes(\"image\")) {\n        // +2 to account for the extra dot after the image\n        fieldName = fieldName.substring(fieldName.lastIndexOf(\".\") + 1);\n\n        if ([\"src\", \"alt\"].includes(fieldName)) {\n          updatedGame.image[fieldName] = value;\n        } else {\n          throw new Error(\n            `Bad image field '${fieldName}' for attempted update.`\n          );\n        }\n      } else if (fieldName.includes(\"questions\")) {\n        const idx = parseInt(\n          fieldName.substring(\n            fieldName.lastIndexOf(\"[\") + 1,\n            fieldName.lastIndexOf(\"]\")\n          )\n        );\n\n        // +2 to account for the extra dot after the ]\n        fieldName = fieldName.substring(fieldName.lastIndexOf(\"]\") + 2);\n        console.log(fieldName, !fieldName.includes(\".\"));\n\n        if (!fieldName.includes(\".\")) {\n          updatedGame.questions[idx][fieldName] = value;\n        } else if (fieldName === \"answers.display\") {\n          updatedGame.questions[idx].answers.display = value;\n        } else if (fieldName === \"answers.accepts\") {\n          updatedGame.questions[idx].answers.accepts = value;\n        } else {\n          throw new Error(\n            `Bad question field '${fieldName}' for attempted update.`\n          );\n        }\n      } else {\n        throw new Error(`Bad field name '${fieldName}' for attempted update.`);\n      }\n\n      console.log(game, updatedGame);\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onAddQuestion = () => {\n    let updatedGame = makeDeepCopyOfGame();\n    updatedGame.questions.push(makeBlankQuestion());\n    updateGame(updatedGame);\n    validateGame({ g: updatedGame });\n  };\n\n  const onMoveQuestion = (idx, direction) => {\n    return () => {\n      let destIdx;\n      switch (direction) {\n        case \"up\":\n          destIdx = idx - 1;\n          break;\n        case \"down\":\n          destIdx = idx + 1;\n          break;\n        default:\n          throw new Error(`Invlid direction to move question: '${direction}'`);\n      }\n\n      let updatedGame = makeDeepCopyOfGame();\n\n      let placeholder = updatedGame.questions[destIdx];\n      updatedGame.questions[destIdx] = updatedGame.questions[idx];\n      updatedGame.questions[idx] = placeholder;\n\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onDeleteQuestion = (idx) => {\n    return () => {\n      let updatedGame = makeDeepCopyOfGame();\n      updatedGame.questions.splice(idx, 1);\n      updateGame(updatedGame);\n      validateGame({ g: updatedGame });\n    };\n  };\n\n  const onSubmit = () => {\n    setWasSubmitted(true);\n    if (!validateGame({ force: true })) {\n      // Scroll to the top of the page to show the error banner.\n      window.scrollTo(0, 0);\n\n      return;\n    }\n\n    let gameToDownload = makeDeepCopyOfGame();\n    delete gameToDownload.id;\n    for (let i = 0; i < gameToDownload.questions.length; i++) {\n      delete gameToDownload.questions[i].id;\n    }\n    if (gameToDownload.image.src.length < 1) {\n      delete gameToDownload.image;\n    }\n\n    const out = format(JSON.stringify(gameToDownload), {\"parser\": \"json\", \"plugins\": [parserBabel]});\n\n    const anchor = document.createElement(\"a\");\n    anchor.setAttribute(\n      \"href\",\n      \"data:application/json;charset=utf-8,\" + encodeURIComponent(out)\n    );\n    anchor.setAttribute(\"download\", `${game.id}.json`);\n\n    document.body.appendChild(anchor);\n    anchor.click();\n    document.body.removeChild(anchor);\n  };\n\n  return (\n    <Editor\n      game={game}\n      invalid={invalid}\n      wasSubmitted={wasSubmitted}\n      updateField={onFieldChange}\n      onSubmit={onSubmit}\n      addQuestion={onAddQuestion}\n      deleteQuestion={onDeleteQuestion}\n      moveQuestion={onMoveQuestion}\n    />\n  );\n};\n\nexport default EditorController;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Container, ThemeProvider } from \"@material-ui/core\";\n\nimport Home from \"./components/Home\";\nimport NavBar from \"./components/NavBar\";\nimport Theme from \"./Theme\";\n\nimport GameLoader from \"./components/GameLoader\";\nimport GameController from \"./components/GameController\";\nimport EditorController from \"./components/EditorController\";\n\nlet App = () => {\n  return (\n    <ThemeProvider theme={Theme}>\n      <Router>\n        <NavBar />\n        <Container>\n          <Switch>\n            <Route\n              path={\"/play/:gameId\"}\n              children={<GameLoader component={GameController} />}\n            />\n            <Route path={\"/create\"}>\n              <EditorController />\n            </Route>\n            <Route\n              path={\"/edit/:gameId\"}\n              children={<GameLoader component={EditorController} />}\n            />\n            <Route path={\"/\"} key=\"home\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}